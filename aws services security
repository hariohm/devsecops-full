In AWS security, organizations primarily focus on securing the 15-20 core services that are widely used, covering IaaS, PaaS, and SaaS models. These services, including IAM, EC2, S3, RDS, Lambda, EKS, ECS, VPC, CloudTrail, and Security Hub, must be evaluated for security misconfigurations, access control, encryption, and compliance. Security validation is performed across three areas: pentesting, where manual and automated vulnerability assessments help identify misconfigurations and weaknesses; DevSecOps, where automated security integration in CI/CD ensures secure deployments; and application security, which focuses on securing APIs, web applications, and protecting against OWASP Top 10 vulnerabilities. Additionally, cloud security posture management (CSPM) tools such as Scout Suite are used to continuously monitor misconfigurations across cloud services, ensuring compliance with security standards.

Once cloud security is in place, the next critical area is code security, which begins when developers commit or push code to repositories like GitHub or GitLab. Software Composition Analysis (SCA) is conducted using tools like OWASP Dependency-Check, Snyk, and Trivy to identify vulnerabilities in open-source dependencies. These tools help detect outdated libraries, transitive vulnerabilities, and package security issues, ensuring that applications do not depend on insecure third-party components. The mitigation process involves updating outdated libraries, applying security patches, and replacing vulnerable dependencies with safer alternatives. Following SCA, Static Application Security Testing (SAST) is performed using SonarQube, Semgrep, Snyk, and Checkmarx to analyze the source code for security flaws such as SQL injection, hardcoded secrets, and insecure cryptography. Along with SAST, secret scanning is performed using GitLeaks to detect API keys, passwords, and sensitive credentials that may have been inadvertently committed to repositories. Since these security checks are primarily developer-driven, the DevSecOps team ensures enforcement through automated security policies but does not modify the code itself.

The next phase involves Dynamic Application Security Testing (DAST), which tests the application in a running state to detect real-world vulnerabilities such as XSS, SQL injection, broken authentication, and security misconfigurations. This can be done manually or automatically using tools like Burp Suite, OWASP ZAP, and Nessus. DAST scans help uncover security flaws that may not be visible in static code analysis, providing a more comprehensive security assessment. If code quality or security gates fail due to a low security score (below 75 or 100%), the development team must rework the code before it proceeds further. This automated security enforcement ensures that vulnerabilities are addressed before deployment without requiring manual intervention from security teams.

In modern cloud environments, container security is equally crucial. Container and image scanning are conducted to check for vulnerabilities in Docker builds, Kubernetes manifests, and deployed container images. Trivy, Kube-bench, and Grype are commonly used tools to scan for CVEs, ensure Kubernetes compliance, and detect security misconfigurations. Issues such as running containers as root, exposed ports, and the use of outdated base images are mitigated by implementing non-root users, restricting ingress traffic, and using secure base images. Container security extends beyond static scans to runtime security, ensuring that vulnerabilities are not only detected pre-deployment but also monitored in production.

Beyond DevSecOps, application security (AppSec) plays a critical role in ensuring that products are protected against vulnerabilities such as those listed in the OWASP Top 10. Application security testing includes manual penetration testing using Burp Suite, Nikto, and OWASP ZAP to uncover business logic vulnerabilities, insecure authentication, and API flaws. If possible, threat modeling is performed before infrastructure security implementation to proactively identify risks. From a pentester’s perspective, threat modeling involves asset inventory to determine what needs protection, identifying threat actors who may target the system, and analyzing threat vectors to assess potential attack paths. This approach ensures a risk-based security strategy that aligns with both business needs and security best practices.

As a SOC analyst, my role involves continuously monitoring and analyzing server logs to detect and respond to security incidents in real time. Security logging and monitoring are essential to identifying threats such as brute-force attempts, unauthorized access, and anomalous behavior across cloud and on-premises environments. AWS CloudTrail, GuardDuty, ELK Stack, and Splunk are used for centralized log monitoring, enabling rapid detection and response to potential threats. In addition to log analysis, organizations implement SIEM solutions to aggregate security events, detect patterns, and automate incident response. 

Other essential security practices include Zero Trust security implementations using IAM role segmentation, BeyondCorp, and network segmentation strategies to minimize attack surfaces. Secure Software Development Lifecycle (SSDLC) principles are enforced throughout the development process by integrating security testing at every stage, from code commit to production deployment. Security in CI/CD pipelines is automated using GitHub Actions, GitLab CI/CD, and Jenkins to enforce security compliance at each step. Furthermore, red team vs. blue team exercises help simulate attack scenarios, allowing organizations to test their incident response readiness. 

In summary, a well-structured security approach should cover AWS cloud security, secure coding practices, DevSecOps automation, container security, application security, threat modeling, and continuous security monitoring. This strategy applies universally across organizations, ensuring a robust security posture for cloud environments, codebases, and applications. Would you like a step-by-step roadmap tailored for mastering each phase?

### **Your Content - Revised & Structured Properly**  

1️⃣ **AWS Security Checks (IaaS, PaaS, SaaS)**  
   - When using AWS services in **IaaS, PaaS, and SaaS models**, we primarily focus on securing **15-20 commonly used services**.  
   - These services need to be checked for **security misconfigurations, access control, encryption, and compliance**.  
   - Security validation should be performed from three perspectives:  
     - **Pentesting side** (manual & automated vulnerability assessments)  
     - **DevSecOps side** (automated security integration into CI/CD)  
     - **Application security side** (app-layer security, OWASP Top 10, API security)  

2️⃣ **Code Security - Source Code & Dependency Analysis**  
   - After AWS security, the next focus is **code security** when developers push or commit code to repositories like **GitHub or GitLab**.  
   - **Software Composition Analysis (SCA)** is performed to check dependencies using tools like:  
     - **OWASP Dependency-Check**  
     - **Snyk**  
     - **Trivy**  
   - This helps identify **vulnerabilities in open-source dependencies** and mitigate risks by:  
     - Updating outdated libraries  
     - Replacing vulnerable dependencies with secure alternatives  
     - Applying vendor patches  

3️⃣ **Static Application Security Testing (SAST) & Secrets Scanning**  
   - **After dependency analysis**, we conduct **source code analysis** to identify security flaws in the code itself.  
   - The main tools used are:  
     - **SonarQube**  
     - **Snyk**  
     - **Semgrep**  
     - **Checkmarx**  
   - **Secret scanning** (e.g., API keys, passwords in code) is done using **GitLeaks** to ensure sensitive information is not exposed.  
   - This phase is mainly **developer-driven**, and DevSecOps engineers **do not modify code but enforce security policies**.  

4️⃣ **Dynamic Application Security Testing (DAST)**  
   - **DAST is a form of pentesting**, either **manual or automated**, that tests the running application for security vulnerabilities.  
   - Common tools for DAST:  
     - **Burp Suite** (manual/automated)  
     - **Nessus** (vulnerability scanning)  
     - **OWASP ZAP** (open-source alternative)  
   - This step helps identify **SQL Injection, XSS, Broken Authentication, Security Misconfigurations, etc.**  

5️⃣ **Code Quality Checks & Security Gates**  
   - If the code fails **security checks or does not meet a quality score (e.g., 75 or 100%)**, it is either **rejected or rechecked**.  
   - This process ensures security **without manual intervention from DevSecOps engineers** but enforces strict policies in CI/CD pipelines.  

6️⃣ **Container & Image Scanning**  
   - **Docker and Kubernetes security** are crucial in modern cloud deployments.  
   - **Container image scanning** checks for vulnerabilities inside **Docker builds, container images, and Kubernetes manifests**.  
   - Common tools:  
     - **Trivy** (scans Docker images, Kubernetes configurations)  
     - **Kube-bench** (validates Kubernetes security compliance)  
     - **Grype** (finds CVEs in container images)  
   - Security issues found may include:  
     - Running containers as **root user**  
     - **Exposed ports** in containers  
     - **Using outdated or vulnerable base images**  

7️⃣ **Product Security & Application Security (AppSec)**  
   - Application security primarily involves testing for **OWASP Top 10 vulnerabilities**.  
   - Manual **pentesting** is done using **Burp Suite, OWASP ZAP, and Nikto**.  
   - If possible, **threat modeling** is performed before infrastructure security implementation.  

8️⃣ **Threat Modeling & Risk Assessments**  
   - **Threat modeling** should ideally be done by **solution architects**, but from a **pentester's perspective**, it can be structured as:  
     - **Asset Inventory** (What needs protection?)  
     - **Threat Actors** (Who are the attackers?)  
     - **Threat Vectors** (How will attacks happen?)  
   - This ensures a **risk-based approach to security**, covering **both proactive and reactive security measures**.  

---

### **What You Missed & Additional Points**  

✅ **1. Cloud Security Posture Management (CSPM)**  
   - Automated security checks for **misconfigurations in AWS, Azure, GCP**.  
   - **Tools:** AWS Security Hub, Prowler, Prisma Cloud, CloudSploit.  

✅ **2. API Security Testing**  
   - API vulnerabilities like **excessive data exposure, authentication flaws, broken access controls**.  
   - **Tools:** 42Crunch, Burp Suite, Postman Security Tests.  

✅ **3. Runtime Application Self-Protection (RASP)**  
   - Security embedded inside running applications.  
   - **Tools:** Contrast Security, Imperva, Signal Sciences.  

✅ **4. SIEM & Log Monitoring**  
   - Detect security incidents in real-time using **AWS CloudTrail, GuardDuty, ELK Stack, Splunk**.  

✅ **5. Zero Trust Security Implementation**  
   - **BeyondCorp, IAM Role Segmentation, Network Segmentation**.  
   - **Tools:** AWS IAM, HashiCorp Vault.  

✅ **6. Secure Software Development Lifecycle (SSDLC)**  
   - Security integrated **at every phase** of development.  
   - **Automation in CI/CD using GitHub Actions, GitLab CI/CD**.  

✅ **7. Red Team vs. Blue Team Exercises**  
   - Conducting **attack simulations** (Red Team) and **incident response drills** (Blue Team).  
   - **Tools:** MITRE ATT&CK, Purple Teaming with Atomic Red Team.  

---

### **Final Summary (Company-Applicable Security Strategy)**
| **Security Area** | **Key Checks** | **Tools** |
|------------------|---------------|-----------|
| **AWS Security** | IAM, S3, EC2, Lambda, EKS, RDS | AWS Config, GuardDuty, Security Hub |
| **Code Security** | SAST, SCA, Secret Scanning | SonarQube, Snyk, GitLeaks |
| **DAST** | App Pentesting, API Security | Burp Suite, OWASP ZAP |
| **Container Security** | Image Scanning, Kubernetes Security | Trivy, Kube-bench |
| **AppSec & Pentesting** | OWASP Top 10, Threat Modeling | Threat Dragon, Manual Pentesting |
| **SIEM & Monitoring** | Log Analysis, Incident Response | CloudTrail, Splunk, ELK |
| **DevSecOps in CI/CD** | Security Automation | GitHub Actions, GitLab CI/CD |

---

### **Would you like a step-by-step roadmap for each security phase? 🚀**
1. can you list all the aws security we need to check like for suppose either in saas, paas, iaas, 
services we took and mostly any devops/devsecops engineer only use like 15 to 20 services in aws not more than that 
so how can we  check all the security of those services in respective with pentesting side, devsecops, application security side 
2. after that aws side security done every one will go towards code side like getting code from github or gitlab pushing it or committing it 
to check like software composition analysis or dependency check with owasp dependency check and how to integrate it or how to check it and what
type of vulnerabilities arise from it what are the migitations any example scenarios real time how devops team or developers mitigate it 
3.after dependency check done they start source code analysis with sonarcube, snyk, sem grep , checkmark  to find code issues and along with that 
I think they also scan for git leaks here only can you where it does or what they do here .I think this part is done from developer side
we don't any thing in it I think. 4. is dast scanning we can do it by burp suite or nessus , 
any opensource tools because here dast is nothing but pentesting either manual or automatic it is up to us.
5. after that if they fail or to reach 75 or 100 to the code quality check either it might fail or recheck here also we don't do anything.
6. to check for container scanning, image scanning docker build scanning I don't know whether what they find this so c
an you please elaborate like how I am explaining  i think for this covers the devops/devsecops security part so 
when it comes to product security engineer they say application security and in appsec we check for 
owasp top 10 along with that if possible manual pentesting . before all the infrastructure security 
I think threat modelling  will be done and to be honest it needs to be done with architect but as pentester my point of view of doing
this is with asset inventory , threat actors, threat vectors i think this covers every thing can you explain whether
I have answered correctly or not please structure the structure answer I have given correctly in the point of 
devsecops engineer/product security enginer and the answer you provide should satisfy any company like it can be 
applicable in any company or any devops devsecops workings process and please explain end to end if 
I left any thing please tell me that also clearly and with out losing any concept

Your structure is well thought out, and you're covering almost everything needed for **DevSecOps** and **Product Security Engineering** in any company. Below, I’ll **restructure, refine, and explain** each step **end-to-end**, ensuring clarity for **real-world implementation**.  

---

# **End-to-End DevSecOps & Product Security Engineering Strategy**
This approach applies **universally** to any **DevOps, DevSecOps, or Product Security** workflow.

## **🔹 Phase 1: AWS Cloud Security (IaaS, PaaS, SaaS)**
### **1️⃣ AWS Security Best Practices**
AWS security is **shared responsibility** between AWS and the customer:
- **AWS Secures**: Infrastructure, Hardware, Network, Hypervisor.
- **You Secure**: Data, Applications, IAM, Configurations.

### ✅ **Key AWS Services Used by DevSecOps Teams (15-20 Core Services)**
1. **IAM (Identity & Access Management)** – User roles, MFA, access policies.  
2. **EC2 (Elastic Compute Cloud)** – Virtual machines security.  
3. **S3 (Simple Storage Service)** – Secure object storage.  
4. **RDS (Relational Database Service)** – Database encryption, access control.  
5. **Lambda** – Serverless security, role-based access control.  
6. **EKS (Kubernetes Service)** – Containerized workloads security.  
7. **ECS (Elastic Container Service)** – Container security and scanning.  
8. **CloudFormation/Terraform** – Infrastructure as Code (IaC) security.  
9. **VPC (Virtual Private Cloud)** – Network segmentation, firewalls.  
10. **CloudTrail** – Logs API calls (Auditing).  
11. **Security Groups & NACLs** – Firewalls, network security.  
12. **AWS Config** – Monitors AWS resources for misconfigurations.  
13. **AWS Secrets Manager** – Manages credentials securely.  
14. **AWS WAF (Web Application Firewall)** – Protects against DDoS, XSS, SQLi.  
15. **AWS Shield** – DDoS protection.  
16. **AWS Inspector** – Vulnerability scanning for EC2, Lambda.  
17. **AWS Security Hub** – Compliance & security checks.  
18. **AWS GuardDuty** – Threat intelligence & anomaly detection.  
19. **KMS (Key Management Service)** – Data encryption at rest.  
20. **CloudWatch/ SIEM Integration** – Log monitoring & alerts.  

### ✅ **How to Secure AWS Services?**
| **AWS Service** | **Security Actions** | **Tools** |
|--------------|------------------|------------------|
| **IAM** | Enforce **least privilege**, MFA, avoid root account | AWS IAM Access Analyzer, Prowler |
| **S3** | Enable **encryption**, restrict public access, enable logging | AWS Config, Security Hub |
| **EC2** | Harden instances, disable unnecessary ports | AWS Inspector, Nessus |
| **Lambda** | Restrict permissions, avoid secrets in code | AWS Secrets Manager |
| **EKS/ECS** | Enable **container scanning**, RBAC policies | Trivy, Kube-bench |
| **CloudFormation/Terraform** | Scan for **misconfigurations** | Checkov, tfsec |
| **RDS** | Enable **TLS, IAM authentication** | AWS Security Hub |
| **WAF & Shield** | Prevent **DDoS, SQLi, XSS** | AWS WAF, CloudFront |
| **CloudTrail & Config** | Monitor logs & configurations | SIEM (Splunk, ELK) |

---

## **🔹 Phase 2: Code Security (DevSecOps)**
After AWS security is handled, the focus shifts to **code security**.

### ✅ **2️⃣ Software Composition Analysis (SCA) & Dependency Analysis**
- Checks **open-source dependencies** for vulnerabilities (CVE).
- Finds **outdated** and **insecure** libraries.

🔹 **Tools Used:**
- **OWASP Dependency-Check** (Java, .NET, Python dependencies).
- **Snyk** (Monitors vulnerabilities in package managers).
- **Trivy** (Dependency scanning + Container scanning).

🔹 **Common Vulnerabilities Found:**
| **Issue** | **Example** | **Mitigation** |
|---------|-------------|-------------|
| **Outdated libraries** | Using `log4j 2.14.1` (log4shell) | Upgrade to `log4j 2.17.1` |
| **Insecure dependencies** | Flask < 2.0 (CVE-2021-XXXX) | Use Flask 2.1+ |
| **Transitive vulnerabilities** | A package depends on a vulnerable library | Use `Snyk` to track |

🔹 **How to Integrate in CI/CD?**
- Add **OWASP Dependency-Check** in GitHub/GitLab pipelines.
- Run **Snyk scan** before deployment.

---

### ✅ **3️⃣ Source Code Analysis (SAST + Secret Scanning)**
- **Finds code-level vulnerabilities** like **SQL Injection, Hardcoded Secrets, XSS**.

🔹 **Tools Used:**
- **SonarQube** (Static Analysis).
- **Semgrep** (Fast & lightweight SAST).
- **Checkmarx** (Enterprise-grade SAST).
- **GitLeaks** (Scans for API keys, secrets in Git).

🔹 **Common Issues Found:**
| **Issue** | **Example** | **Mitigation** |
|---------|-------------|-------------|
| **Hardcoded Secrets** | API Key in `.env` file | Store in **AWS Secrets Manager** |
| **SQL Injection** | `SELECT * FROM users WHERE id=` + input | Use **prepared statements** |
| **XSS** | `<script>alert('XSS')</script>` | Sanitize inputs |

🔹 **Where GitLeaks Fits?**
- Detects **leaked credentials** in Git commits.
- Prevents **accidental secret exposure**.

---

### ✅ **4️⃣ Dynamic Application Security Testing (DAST)**
- **Tests the running application** for **real-world attacks**.

🔹 **Tools Used:**
- **Burp Suite** (Manual pentesting, automated scanning).
- **OWASP ZAP** (Open-source alternative).
- **Nessus** (Comprehensive vulnerability scanning).

🔹 **Types of Issues Found:**
- SQL Injection
- XSS
- Broken Authentication

🔹 **Manual vs. Automated:**
- **Manual Testing** (Pentesters use Burp Suite, Metasploit).
- **Automated Testing** (DAST runs in CI/CD).

---

### ✅ **5️⃣ Container Security (Docker, Kubernetes)**
- Scans **Docker images**, **Kubernetes manifests**, **runtime security**.

🔹 **Tools Used:**
- **Trivy** – Scans Docker images, Kubernetes YAML.
- **Kube-bench** – Checks Kubernetes security compliance.
- **Grype** – Finds CVEs in container images.

🔹 **Common Issues:**
| **Issue** | **Example** | **Mitigation** |
|---------|-------------|-------------|
| **Root User in Container** | `USER root` in Dockerfile | Use non-root user |
| **Exposed Ports** | `EXPOSE 8080` with no firewall | Restrict ingress traffic |
| **Vulnerable Base Image** | `FROM ubuntu:16.04` | Use `FROM ubuntu:latest` |

---

## **🔹 Phase 3: Product Security Engineering (AppSec)**
- **Ensures the application itself is secure** from **OWASP Top 10** risks.
- **Includes manual pentesting & threat modeling**.

### ✅ **6️⃣ OWASP Top 10 Testing**
- **Finds security flaws** in application logic.
- **Manually tested by pentesters**.

🔹 **Tools:**
- **Burp Suite**
- **OWASP ZAP**
- **Nikto**

🔹 **Common Tests:**
- SQL Injection
- XSS
- Broken Authentication
- Insecure API calls

---

### ✅ **7️⃣ Threat Modeling**
- Identifies **Threat Actors, Threat Vectors, Assets**.

🔹 **Steps:**
1. **Identify Assets** (Data, APIs, Cloud Services).
2. **Identify Threat Actors** (Hackers, Insiders, External Attackers).
3. **Identify Threat Vectors** (How attacks happen).
4. **Define Security Controls** (MFA, Encryption, IAM).

🔹 **Tools Used:**
- **OWASP Threat Dragon**
- **Microsoft Threat Modeling Tool**
- **Pytm (Python-based)**

---

# **Final Summary (Applicable to Any Company)**
✅ **Phase 1: Secure AWS Cloud Services** (IAM, S3, EC2, VPC, CloudTrail).  
✅ **Phase 2: Secure Codebase** (SAST, SCA, GitLeaks, DAST).  
✅ **Phase 3: Secure Containers** (Trivy, Kube-bench).  
✅ **Phase 4: Secure Applications** (OWASP Top 10, Threat Modeling).  

Would you like a **step-by-step roadmap** for learning each phase? 🚀

Amazon EC2 (Elastic Compute Cloud)
Vulnerabilities in the operating systems that customers install inside EC2 instances.
Vulnerabilities in individual applications that you deploy on EC2.
Network configuration mistakes.
Weak access controls in your AWS account.
Overly permissive Identity and Access Management (IAM) settings may make it easier for attackers
or malicious insiders to modify EC2 instance configurations or change the workloads running on EC2.
In most cases, VMs hosted on EC2 store persistent data using Amazon EBS, a block storage service.
Oversights in the way EBS is configured – such as forgetting to encrypt EBS volumes, 
which are not generally encrypted by default – could expose sensitive data to attack.
(To be clear, EBS is a separate service from EC2, so insecure storage settings aren’t a risk to EC2 per se; 
nonetheless, since EBS and EC2 go hand-in-hand, 
weak security for EBS often translates to security issues for any workloads hosted on EC2.)
EC2 instances can be vulnerable to attacks through a variety of vectors.


AWS Lambda
AWS Lambda handles the infrastructure, scaling, and maintenance, allowing you to focus on your application's functionality.
AWS Lambda is a serverless computing service that allows you to run code in response to events without managing servers.
Here's a simple scenario to illustrate its use:
Scenario: Automatic Image Resizing

Imagine you have a website where users upload images. You want these images to be automatically resized to create thumbnails for previews. Manually resizing each image would be time-consuming and inefficient. With AWS Lambda, you can automate this process:

User Uploads an Image: A user uploads an image to an Amazon S3 bucket.

Trigger Lambda Function: The upload event triggers an AWS Lambda function.

Process the Image: The Lambda function resizes the image to create a thumbnail.

Store the Thumbnail: The resized image is saved back to the S3 bucket.

Display on Website: The website uses the thumbnail for previews.

Ensure all data is encrypted in transit and at rest. Utilize client-side encryption or SSL/TLS for secure data transmission to and from S3.
Data stored on S3 should always be encrypted to safeguard it from unauthorized access.



cloud watch logs,
Focus:

CloudWatch is centered on real-time monitoring and operational performance.
CloudTrail is centered on recording and auditing API calls and user activities.
Data Collection:

CloudWatch collects metrics and logs from AWS services and applications.
CloudTrail records API calls and user activities within your AWS account.

CloudWatch is used for performance monitoring, setting alarms, and visualizing logs.
CloudTrail is used for auditing, security analysis, and compliance reporting.

vpc flow logs,
Amazon VPC Flow Logs
Captures information about the IP traffic going to and from network interfaces in your Virtual Private Cloud (VPC),
aiding in network monitoring and security analysis.


iam role configurations, aws system manager, elastic blob storage

aws elastic bean stack
  how to configure https to all the ec2 sintaces , s3 bucket policies, iam policies, s3 server side encrption with kms, s3 access logs, cloud trail logs,
versioning, Regularly snapshot EBS volumes for backups., elastic file storage, aws route 53- use dnssec to protect against dns spoofing,  use route 53 resolver

 Amazon RDS- Managed relational databases.
AWS KMS (Key Management Service)
Security Best Practices:

Use customer-managed keys for granular control.

Regularly rotate encryption keys.

Use key policies to restrict access.
AWS Secrets Manager
What it is: Store and manage secrets.

Security Best Practices:

Use IAM policies to control access.

Enable automatic rotation for secrets.

For DevSecOps Engineers: Security at Infrastructure & CI/CD Level
Security of AWS services used by development teams.
Security checks in CI/CD pipelines.
Infrastructure & code security (SAST, DAST, SCA, IaC Scanning, etc.).

 For Product Security Engineers: Application & Data Security
Secure the product from OWASP Top 10, Threat Modeling, Pentesting.
Secure customer data and prevent breaches.
Monitor threat actors, vectors, and risks.

1.1 Identity & Access Management (IAM) Security
AWS IAM Users, Roles, Groups, Policies must follow the least privilege principle.
Sure, let's break down how AWS Identity and Access Management (IAM) is used with a simple scenario.
IAM is a service that enables you to manage access to AWS services and resources securely. 
It allows you to create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources.









































